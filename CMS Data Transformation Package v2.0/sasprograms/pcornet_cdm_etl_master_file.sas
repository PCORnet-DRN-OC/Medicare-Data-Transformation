
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                                                     
* Program Name:  pcornet_cdm_etl_master_file.sas                          
*         Date:  12/15/2017                                               
*        Study:  PCORnet CMS Linkage 
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
* Purpose:  The purpose of the program is to transform yearly Medicare  
*           claims data to Pcornet CDM 3.1 annual tables and then create final views/datasets 
*           to respond PCORnet queries 
*
*  Inputs:  
*           1) CMS Medicare Source data(SAS datasets):
*               Mbsf_ab&Mbsf_d/Mbsf_abcd table
*               Inpatient claim table
*               Inpatient revenue table 
*               Outpatient claim table 
*               Outpatient revenue table 
*               Carrier claim table 
*               Carrier line table 
*               Part D drug event table (if available)
*               Mbsf_abcd/Mbsf_d table name (if available)             
*
*           2) SAS programs:
                /etl/infolder/etl_denom.sas
*                             etl_enrollment.sas
*                             etl_ip.sas
*                             etl_op.sas
*                             etl_carr.sas
*                             etl_pde.sas
*                             create_CDM_v31_tablesviews.sas  
*                             build_xwlks.sas
*                             build_harvest.sas
*
*  Output:
*           1) Annual PCORnet CDM v3.1 SAS data datasets at /etl/cdm_v31 
*           2) Final CDM SAS data datasets or views stored at /etl/cdm_v31 
*           3) SAS log files of each programs stored in /etl/outfolder
*           4) SAS output file of each programs per year in PDF format stored in /etl/outfolder
*
*  Requirements:  
*                1) Program run in SAS 9.3 or higher
*                2) The following sub-directory structure 
*                   is required to be created on its root directory. 
*                   a) /outfolder: folder containing output and log files generated by the 
*                       etl programs.
*                   b) /sasprograms: folder containing the master SAS program 
*                       that must be edited and then executed locally.
*                   c) /infolder: folder containing all input and lookup files 
*                       needed to execute the ETL master program. The 
*                       contents of this folder should not be edited.
*
*  Actions needed: 
*               1) User provides libname path where source data resides (section below)
*                     (Example: /xyz/cms/)
*               2) User provides root directory path where the required
*                     sub-directory structure has been created (refer to section - Enter root directory to sub-directory for ETL workplans) 
*                     (Example: /xyz/etl/) 
*                  ###  DO NOT add sub-directory structure (i.e. /infolder) ###
*               3) User provides the Source table names (refer to section - Enter the Source table names)
                4) nametype    -- Flag specifies whether long or short column names used in Medicare Source tables 
*               4) mkxwlk_hrvs -- Flag indicates whether harvest table, and provider and facility cross walk files need to 
*                                 be created or refreshed             
*               5)     startyr -- First year of MBSF, Part A, B source data to transform 
*               6)       endyr -- Last year of MBSF, Part A, B source data to transform  
*               7)   pdstartyr -- First year of Part D source data to transform 
*               8)     pdendyr -- Last year of Part D source data to transform 
*               9)      dsview -- Flag indicates whether or not you want to combine the Annual tables to single views 
*               
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */;
options mprint nocenter merror serror fullstimer validvarname=upcase;
%macro PCORNET_CDM_ETL_MASTER_FILE;

/* Enter root directory to sub-directory for ETL workplans */
%let epath = ;

/* Enter main directory where the source data tables are stored */
%let sdpath = ;

/*************************************************************************
* Skip this section if all source data are stored in one folder.
* Enter sub-directory where each type of source data are stored. 
***************************************************************************/
%let SDMBSFAB = ;  /*Edit sub-directory for MBSF_AB/MBSF_ABCD data */;
%let SDIP     = ;  /*Edit sub-directory for Inpatient claim data   */;
%let SDOP     = ;  /*Edit sub-directory for Outpatient claim data  */;
%let SDCARR   = ;  /*Edit sub-directory for Carrier claim data     */;
%let SDMBSFD  = ;  /*Edit sub-directory for MBSF_D/MBSF_ABCD data  */;
%let SDPDE    = ;  /*Edit sub-directory for Part D drug event data */;

/*******************************************************************************************************
* Enter the Source table name, only provide the part without four digits year. 
* Leave blank if the source table is not available at your site. 
* Ensure the macro variables below are not commented out (even if the table does NOT exist at your site).
* *******************************************************************************************************/

%let MBSFTBL    = mbsf_ab;     /*Edit the MBSF_AB/MBSF_ABCD table name     */;        
%let IPTBL      = inptclmsj;   /*Edit the Inpatient claim base table name  */;
%let IPREVTBL   = inptrevj;    /*Edit the Inpatient revenue table name     */; 
%let OPTBL      = otptclmsj;   /*Edit the Outpatient claim base table name */;
%let OPREVTBL   = otptrevj;    /*Edit the Outpatient revenue name          */; 
%let CARTBL     = bcarclmsj;   /*Edit the Carrier claim base table name    */;
%let CARLNTBL   = bcarlinej;   /*Edit the Carrier line table name          */;
%let PDETBL     = pdesaf;      /*Edit the Part D drug event table name     */;
%let PTDENOMTBL = mbsf_d;      /*Edit the MBSF_D/MBSF_ABCD table name      */;

/*- Set nametype to L if CMS Medicare source tables with Long Column Names  -*/;
%let NAMETYPE = S; * Default is S. Set to L if source tables with Long Column Names*;

/*******************************************************************************
* Set mkxwlk_hrvs to Y for creating inital harvest table
* And create crosswalk file for the pseudoidentifier to provider code
* And crosswalk file for the pseudoidentifier to facility code
* Set dsview to B if you want to create both permanent datasets and views
********************************************************************************/

%let MKXWLK_HRVS = Y;     /* Default is Y. Set to N if harvest table and crosswalk tables have already been created */;
%let STARTYR     = 2014;  /* Set first year of MBSF, Part A, B source data to transform. */;
%let ENDYR       = 2015;  /* Set last year of MBSF, Part A, B source data to transform. */;
%let PDSTARTYR   = 2014;  /* Set first year of Part D source data to transform. */; 
%let PDENDYR     = 2014;  /* Set last year of Part D source data to transform. */;   
%let DSVIEW      = B;     /* Default is B. Set to Y if you only want to combine the Annual tables to single views, otherwise set to N to generate tables only */;

/* Specify network-id, network-name, datamart-id, datamart-name, datamart-platform */;
%let NETID  = C2C4;
%let NETNM  = CMS PILOT;
%let DMID   = C2C4MC;
%let DMNM   = CMS PILOT;
%let DMPLFM = 05;

/********************************************************************************
*                                 END OF USER INPUT                                  
*                             DO NOT EDIT BELOW THIS LINE                             
*                (Consult with POCRNET OPERATIONS CENTER for Questions)                         
********************************************************************************/

/*Specify the CDM table names.*/    
%let DEMTBL=demographic;   *specify the demographic table name  *;
%let DEATTBL=death;        *specify the death table name        *;
%let ENRTBL=enrollment;    *specify the enrollment table name   *; 
%let ENCTBL=encounter;     *specify the encounter table name    *;       
%let DIATBL=diagnosis;     *specify the diagnosis table name    *;        
%let PROCTBL=procedures;   *specify the procedure table name    *;        
%let DISTBL=dispensing;    *specify the dispensing table name   *;  
             
/********************************************************************************
*- Flush datasets in WORK ENVIRONMENT
*********************************************************************************/
proc datasets nolist nodetails lib=work kill memtype=data; quit;

/********************************************************************************
*- Set LIBNAMES for source data and output data tables
*********************************************************************************/
libname lib_den "&sdpath.&sdmbsfab" access=readonly;
libname lib_ip "&sdpath.&sdip" access=readonly;
libname lib_op "&sdpath.&sdop" access=readonly;
libname lib_carr "&sdpath.&sdcarr" access=readonly;
libname lib_pden "&sdpath.&sdmbsfd" access=readonly;
libname lib_pde "&sdpath.&sdpde" access=readonly;
libname pcordata "&epath.cdm_v31/";
libname ref "&epath.infolder/";

%inc "&epath.infolder/varlists.sas" /nosource2 ;
%inc "&epath.infolder/pcncdm_formats.sas" /nosource2;
%inc "&epath.infolder/rtm_utility.sas" /nosource2;
%inc "&epath.infolder/build_dx_px.sas" /nosource2;
%inc "&epath.infolder/build_enroll.sas" /nosource2;

%let start_time = %sysfunc(datetime());

data run_time_tracking;
    length programs $100 data_year $20;
    format start_time end_time datetime19. processing_time time8.;
	array _char_ programs data_year;
    array _num_  start_time end_time processing_time;
	programs="PCORNET CDM v31 ETL";
    start_time=&start_time;
    output;
run;

%let nametype = %upcase(&nametype);
%let mkxwlk_hrvs = %lowcase(&mkxwlk_hrvs) ;
%if &mkxwlk_hrvs eq y %then %do ; 
  %inc "&epath.infolder/build_harvest.sas" /nosource2 ;
  %inc "&epath.infolder/build_xwlks.sas" /nosource2 ;
%end;

/* Include Denom */
%inc "&epath.infolder/etl_denom.sas" /nosource2 ;   /* Please do not edit */

/* Include Enroll */
%inc "&epath.infolder/etl_enrollment.sas" /nosource2 ;  /* Please do not edit */

 
%if %sysevalf(&syscc gt 4) %then %do ;
   %put .................................................................................;
   %put etl_enrollment macro is aborting;                 
   %put Check program log &epath.infolder/etl_enrollment.log for details;                
   %put .................................................................................;      
   %abort cancel ;      
 %end;

  proc sort data = pcordata.facility(keep=SOURCE_ID FACILITYID) 
       out=facility(rename=(SOURCE_ID = PROVIDER)) nodupkey;
       by SOURCE_ID;
  run;

  proc sort data = pcordata.provider(where=(upcase(PROVIDER_CLASS) = 'AT_NPI')) 
       out=provider(keep=SOURCE_ID PROVIDERID rename=(SOURCE_ID = AT_NPI)) nodupkey;
       by SOURCE_ID;
  run;

  %if %length(&CARTBL) > 0 %then %do;
    proc sort data = pcordata.provider(where=(upcase(PROVIDER_CLASS) = 'PRF_NPI')) 
       out=provider_prfnpi(keep=SOURCE_ID PROVIDERID rename=(SOURCE_ID = PRF_NPI)) nodupkey;
       by SOURCE_ID;
    run;
  %end;

  %do yr = &startyr %to &endyr;
    proc sql;
      select distinct memname into :tblist separated by ' ' 
      from dictionary.tables where libname="PCORDATA" and memname ? "&yr";
    quit;

    %if &sqlobs > 0 %then %do;
      proc datasets library=pcordata nolist;
        delete &tblist;		
      quit;
    %end;

    %let prev_yr = %eval(&yr-1);

    %if %length(&IPTBL) > 0 %then %do; /* begin-if inpatient data is available to transform */
      %include "&epath.infolder/etl_ip.sas";
      %if %sysevalf(&syscc gt 4) %then %do ;
        %put .................................................................................;
        %put etl_ip macro is aborting;                 
        %put Check program log &epath.infolder/etl_ip.log for details;                                           
        %put .................................................................................;      
        %abort cancel ;      
      %end;
    %end; /* end-if inpatient data is available to transform */

	%if %length(&OPTBL) > 0 %then %do; /* begin-if outpatient data is available to transform */
      %include "&epath.infolder/etl_op.sas";
      %if %sysevalf(&syscc gt 4) %then %do ;
        %put .................................................................................; 
        %put Error: etl_op macro is aborting because of errors;                 
        %put Check program log &epath.infolder/etl_op.log for details;                                           
        %put .................................................................................;      
        %abort cancel ;      
      %end;
    %end; /* end-if outpatient data is available to transform */

	%if %length(&CARTBL) > 0 %then %do; /* begin-if carrier data is available to transform */
      %include "&epath.infolder/etl_carr.sas";
      %if %sysevalf(&syscc gt 4) %then %do ;
        %put .................................................................................; 
        %put etl_carr macro is aborting;                 
        %put Check program log &epath.infolder/etl_carr.log for details;                                           
        %put .................................................................................;      
        %abort cancel ;      
      %end; 
    %end; /* end-if carrier data is available to transform */
   %end;/*end of yr loop*/

   %if %length(&PDETBL) > 0 %then %do; /* begin-if part D data is available to transform */
     %do yr = &pdstartyr %to &pdendyr;

       %let prev_yr = %eval(&yr-1);
       %include "&epath.infolder/etl_pde.sas";
       %if %sysevalf(&syscc gt 4) %then %do ;
         %put .................................................................................; 
         %put etl_pde macro is aborting;                 
         %put Check program log &epath.infolder/etl_pde.log for details;                                           
         %put .................................................................................;      
         %abort cancel ;      
       %end;
     %end;/*end of yr loop*/
  %end; /* end-if part D data is available to transform */

  %inc "&epath.infolder/create_CDM_v31_tablesviews.sas";
%mend PCORNET_CDM_ETL_MASTER_FILE;

%PCORNET_CDM_ETL_MASTER_FILE;
